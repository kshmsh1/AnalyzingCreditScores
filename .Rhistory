knitr::opts_chunk$set(fig.height=4, fig.width=6, warning = F)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(janitor, sjmisc, stringr, randomForest, tree, ISLR, rpart, rattle, pROC, partykit, ggplot2, glmnet, leaps, dplyr, keras, neuralnet, imager, ranger, lubridate, tm, tidytext, wordcloud)
#devtools::install_github("rstudio/keras")
#library(keras)
#install_keras()
setwd("C:\\Users\\keshavramesh\\STAT 4710\\finalproject")
# setwd("C:\\Users\\Tim\\Desktop\\STAT 4710\\final project")
# df <- read.csv("data\\train.csv")
df <- read.csv("Users\keshavramesh\STAT471\finalproject\data\train.csv")
# setwd("C:\\Users\\Tim\\Desktop\\STAT 4710\\final project")
# df <- read.csv("data\\train.csv")
df <- read.csv("Users/keshavramesh/STAT471/finalproject/data/train.csv")
# setwd("C:\\Users\\Tim\\Desktop\\STAT 4710\\final project")
# df <- read.csv("data\\train.csv")
df <- read.csv("Users/keshavramesh/STAT471/finalproject/data/train.csv")
knitr::opts_chunk$set(fig.height=4, fig.width=6, warning = F)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(car, janitor, sjmisc, stringr, randomForest, tree, ISLR, rpart, rattle, pROC, partykit, ggplot2, glmnet, leaps, dplyr, keras, neuralnet, imager, ranger, lubridate, tm, tidytext, wordcloud)
#devtools::install_github("rstudio/keras")
#library(keras)
#install_keras()
setwd("C:\\Users\\Tim\\Desktop\\STAT 4710\\final project")
# setwd("C:\\Users\\Tim\\Desktop\\STAT 4710\\final project")
df <- read.csv("data\\train.csv")
# setwd("C:\\Users\\Tim\\Desktop\\STAT 4710\\final project")
# df <- read.csv("data\\train.csv")
# df <- read.csv("/Users/keshavramesh/STAT471/finalproject/data/train.csv", header = T)
cat("Data set Shape:")
dim(df)
# setwd("C:\\Users\\Tim\\Desktop\\STAT 4710\\final project")
# df <- read.csv("data\\train.csv")
df <- read.csv("/Users/keshavramesh/STAT471/finalproject/data/train.csv", header = T)
cat("Data set Shape:")
dim(df)
knitr::opts_chunk$set(fig.height=4, fig.width=6, warning = F)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(car, janitor, sjmisc, stringr, randomForest, tree, ISLR, rpart, rattle, pROC, partykit, ggplot2, glmnet, leaps, dplyr, keras, neuralnet, imager, ranger, lubridate, tm, tidytext, wordcloud, ggcorrplot)
#devtools::install_github("rstudio/keras")
#library(keras)
#install_keras()
# setwd("C:\\Users\\Tim\\Desktop\\STAT 4710\\final project")
# df <- read.csv("data\\train.csv")
df <- read.csv("/Users/keshavramesh/STAT471/finalproject/data/train.csv", header = T)
cat("Data set Shape:")
dim(df)
cat("Before Conversion: Number of Unique Type in Loan")
loan_types <- unique(df$Type_of_Loan)
length(loan_types)
total_types <- c()
for (e in df$Type_of_Loan){
e <- str_replace(e, "and ", " ")
more_elements <- strsplit(e, ", ")
for (e2 in more_elements){
total_types <- append(total_types, trimws(tolower(e2)))
}
total_types <- unique(total_types)
}
cat("After ConversionNumber of Unqie Type in Loan")
total_types
for (l in total_types){
df <- df %>%
mutate(!!l := if_else(grepl(l, tolower(Type_of_Loan)), "1", "0"))
}
df <- clean_names(df)
cat("Unique payment_behaviour")
length(unique((df$payment_behaviour)))
df$spent <- sapply(strsplit(tolower(df$payment_behaviour), "_"), "[", 1)
df$value <- sapply(strsplit(tolower(df$payment_behaviour), "_"), "[", 3)
cat("Unqiue class in spent")
unique(df$spent)
cat("Unqiue class in value")
unique(df$value)
drops <- c("id","customer_id", "name", "ssn", "type_of_loan")
df$occupation <- as.factor(df$occupation)
df$credit_mix <- as.factor(df$credit_mix)
df$payment_of_min_amount <- as.factor(df$payment_of_min_amount)
df$payment_behaviour <- as.factor(df$payment_behaviour)
df$spent <- as.factor(df$spent)
df$value <- as.factor(df$value)
df$credit_score <- as.factor(df$credit_score)
df <- df[,!(names(df) %in% drops)]
df <- as.data.frame(unclass(df),stringsAsFactors=TRUE)
names(df)
level <- c("Poor", "Standard", "Good")
df %>% dplyr::mutate(credit_score = factor(credit_score,
levels = level)) %>%
ggplot(aes(x=credit_score, fill = credit_score) ) +
geom_bar() +
geom_text(stat='count', aes(label=after_stat(count)), vjust=-1) +
ggtitle("Bar Plot Credit Score") +
theme(plot.title = element_text(hjust = 0.5))
df_age_credit_salary <- df %>% group_by(age, credit_score) %>% summarize(mean_salary = mean(annual_income), .groups = 'drop')
ggplot(df_age_credit_salary, aes(x = factor(age), y = mean_salary, group = credit_score, color = credit_score)) +
geom_line()
library(ggcorrplot)
model.matrix(~0+., data=df) %>%
cor(use="pairwise.complete.obs") %>%
ggcorrplot(show.diag=FALSE,  lab=TRUE, lab_size=1)
df_ml <- df[seq(1, nrow(df), 12), ]
df_ml <- df_ml[which(df_ml$credit_score == "Good" | df_ml$credit_score == "Poor"), ]
cat("Before Conversion")
table(df_ml$credit_score)
i <- sapply(df_ml, is.factor)
df_ml[i] <- lapply(df_ml[i], as.character)
df_ml <- as.data.frame(unclass(df_ml),stringsAsFactors=TRUE)
cat("After Conversion")
table(df_ml$credit_score)
smp_size <- 0.75 * nrow(df_ml)
train_ind <- sample(seq_len(nrow(df_ml)), size = smp_size)
df_train <- df_ml[train_ind, ]
df_test <- df_ml[-train_ind, ]
X <- model.matrix(credit_score ~.,df_train)[,-1]
Y <- df_train[, "credit_score"]
fit1.cv <- cv.glmnet(X, Y, alpha=1, family="binomial", nfolds = 10, type.measure = "deviance")
plot(fit1.cv)
coef.1se <- coef(fit1.cv, s="lambda.1se")
coef.1se <- coef.1se[which(coef.1se !=0),]
coef.1se[order(abs(coef.1se), decreasing = TRUE)]
coef.min <- coef(fit1.cv, s="lambda.min")
coef.min <- coef.min[which(coef.min !=0),]
coef.min[order(abs(coef.min), decreasing = TRUE)]
final.model.1 <- glm(credit_score ~num_credit_card +
interest_rate +num_of_loan +
delay_from_due_date+
credit_mix+
payment_behaviour+
delay_from_due_date +
num_credit_inquiries +
outstanding_debt +
credit_history_age +
payment_of_min_amount +
total_emi_per_month +
no_data +
value,data = df_train, family = "binomial")
Anova(final.model.1)
final.model.2 <- glm(credit_score ~num_credit_card +
interest_rate +
num_of_loan+
credit_mix +
payment_behaviour  +
credit_history_age +
total_emi_per_month +
no_data,data = df_train, family = "binomial")
summary(model)
final.model.2 <- glm(credit_score ~num_credit_card +
interest_rate +
num_of_loan+
credit_mix +
payment_behaviour  +
credit_history_age +
total_emi_per_month +
no_data,data = df_train, family = "binomial")
summary(final.model.2)
summary(final.model.2)$coefficients[order(abs(summary(final.model.2)$coefficients[, "Estimate"]), decreasing = TRUE),]
final.model.2 <- glm(credit_score ~num_credit_card +
interest_rate +
num_of_loan+
credit_mix +
payment_behaviour  +
credit_history_age +
total_emi_per_month +
no_data,data = df_train, family = "binomial")
y_pred <- predict(final.model.2, newdata = df_train, type = "response")
y_pred_binary <- ifelse(y_pred > 0.5, "Bad", "Good")
y_test <- df_train$credit_score
accuracy <- sum(y_pred_binary == y_test) / length(y_test)
cat("Accuracy:", accuracy)
# Conduct PCA
pca <- prcomp(df_ml[, numeric_vars], center = TRUE, scale. = TRUE)
# Conduct PCA
numeric_vars <- which(sapply(df_ml, is.numeric))
pca <- prcomp(df_ml[, numeric_vars], center = TRUE, scale. = TRUE)
# Print summary of PCA
summary(pca)
# Visualize explained variance by each principal component
scree_plot <- function(pca_obj) {
variance_pct <- (pca_obj$sdev^2) / sum(pca_obj$sdev^2)
df_var <- data.frame(component = 1:length(variance_pct), variance = variance_pct)
ggplot(df_var, aes(x = component, y = variance)) +
geom_point() +
geom_line(group = 1) +
xlab("Principal Component") +
ylab("Proportion of Explained Variance") +
ggtitle("Scree Plot") +
theme_minimal()
}
scree_plot(pca)
# Visualize first two principal components
biplot(pca, scale = 0, cex = 0.8)
# Calculate the cumulative proportion of variance explained
eigenvalues <- pca$sdev^2
variance_pct <- eigenvalues / sum(eigenvalues)
cumulative_variance_pct <- cumsum(variance_pct)
# Calculate the cumulative proportion of variance explained
eigenvalues <- pca$sdev^2
variance_pct <- eigenvalues / sum(eigenvalues)
cumulative_variance_pct <- cumsum(variance_pct)
cumulative_variance_pct
# Create a scree plot of the cumulative proportion of variance explained
df_cum_var <- data.frame(component = 1:length(cumulative_variance_pct),
cumulative_variance = cumulative_variance_pct)
ggplot(df_cum_var, aes(x = component, y = cumulative_variance)) +
geom_point() +
geom_line(group = 1) +
xlab("Principal Component") +
ylab("Cumulative Proportion of Variance Explained") +
ggtitle("Scree Plot of Cumulative Proportion of Variance Explained") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Create a scree plot of the cumulative proportion of variance explained
df_cum_var <- data.frame(component = 1:length(cumulative_variance_pct),
cumulative_variance = cumulative_variance_pct)
ggplot(df_cum_var, aes(x = component, y = cumulative_variance)) +
geom_point(color = "blue") +
geom_line(color = "blue", group = 1) +
geom_hline(yintercept = 0.95, linetype = "dashed", color = "red")
xlab("Principal Component") +
ylab("Cumulative Proportion of Variance Explained") +
ggtitle("Scree Plot of Cumulative Proportion of Variance Explained") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Create a scree plot of the cumulative proportion of variance explained
df_cum_var <- data.frame(component = 1:length(cumulative_variance_pct),
cumulative_variance = cumulative_variance_pct)
ggplot(df_cum_var, aes(x = component, y = cumulative_variance)) +
geom_point(color = "blue") +
geom_line(color = "blue", group = 1) +
geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
labs(x = "Principal Components", y = "Cumulative Proportion of Variance Explained",
title = "Scree Plot: Cumulative Proportion of Variance Explained") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(scree_plot_)
# Create a scree plot of the cumulative proportion of variance explained
df_cum_var <- data.frame(component = 1:length(cumulative_variance_pct),
cumulative_variance = cumulative_variance_pct)
scree_plot_cumulative <- ggplot(df_cum_var, aes(x = component, y = cumulative_variance)) +
geom_point(color = "blue") +
geom_line(color = "blue", group = 1) +
geom_hline(yintercept = 0.95, linetype = "dashed", color = "red") +
labs(x = "Principal Components", y = "Cumulative Proportion of Variance Explained",
title = "Scree Plot: Cumulative Proportion of Variance Explained") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
print(scree_plot_cumulative)
# Determine the optimal number of principal components using the "elbow method"
elbow_index <- which.max(diff(diff(cumulative_variance_pct)))
cat("Optimal number of principal components (elbow method):", elbow_index)
# Determine the optimal number of principal components
optimal_n <- which(cumulative_variance_pct >= 0.95)[1]
cat("Optimal number of principal components:", optimal_n)
# Create a new dataframe with the principal components
pca_df <- as.data.frame(pca$x[, 1:optimal_n])
# Determine the optimal number of principal components using the "elbow method"
elbow_index <- which.max(diff(diff(cumulative_variance_pct)))
cat("Optimal number of principal components (elbow method):", elbow_index)
# Determine the optimal number of principal components
optimal_n <- which(cumulative_variance_pct >= 0.95)[1]
cat("Optimal number of principal components:", optimal_n)
# Create a new dataframe with the principal components
pca_df <- as.data.frame(pca$x[, 1:optimal_n])
# Calculate the PCA loadings
pca_loadings <- pca$rotation[, 1:elbow_index]
pca_loadings
# 2D plot of the first two principal components
pca_2D <- ggplot(pca_df_additional, aes(x = PC1, y = PC2)) +
geom_point() +
theme_minimal() +
labs(x = "Principal Component 1", y = "Principal Component 2", title = "PCA 2D Plot")
# 2D plot of the first two principal components
pca_2D <- ggplot(pca_df, aes(x = PC1, y = PC2)) +
geom_point() +
theme_minimal() +
labs(x = "Principal Component 1", y = "Principal Component 2", title = "PCA 2D Plot")
print(pca_2D)
install.packages("rpart")
install.packages("rpart.plot")
install.packages("randomForest")
library(rpart)
library(rpart.plot)
library(randomForest)
install.packages("rpart")
knitr::opts_chunk$set(fig.height=4, fig.width=6, warning = F)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(car, janitor, sjmisc, stringr, randomForest, tree, ISLR, rpart, rattle, pROC, partykit, ggplot2, glmnet, leaps, dplyr, keras, neuralnet, imager, ranger, lubridate, tm, tidytext, wordcloud, ggcorrplot, rpart, rpart.plot, randomFoest)
#devtools::install_github("rstudio/keras")
#library(keras)
#install_keras()
knitr::opts_chunk$set(fig.height=4, fig.width=6, warning = F)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(car, janitor, sjmisc, stringr, randomForest, tree, ISLR, rpart, rattle, pROC, partykit, ggplot2, glmnet, leaps, dplyr, keras, neuralnet, imager, ranger, lubridate, tm, tidytext, wordcloud, ggcorrplot, rpart, rpart.plot, randomForest)
#devtools::install_github("rstudio/keras")
#library(keras)
#install_keras()
library(rpart)
library(rpart.plot)
library(randomForest)
library(rpart)
library(rpart.plot)
library(randomForest)
# Create a decision tree
dt <- rpart(credit_score ~ ., data = df_train, method = "class")
# Visualize the decision tree
rpart.plot(dt)
# Predict the credit scores on the test set
dt_pred <- predict(dt, newdata = df_test, type = "class")
# Calculate the accuracy
dt_accuracy <- mean(dt_pred == df_test$credit_score)
cat("Decision Tree Accuracy:", dt_accuracy)
# Create a random forest
rf <- randomForest(credit_score ~ ., data = df_train, ntree = 500)
# Print the random forest model
print(rf)
# Predict the credit scores on the test set
rf_pred <- predict(rf, newdata = df_test)
# Calculate the accuracy
rf_accuracy <- mean(rf_pred == df_test$credit_score)
cat("Random Forest Accuracy:", rf_accuracy)
